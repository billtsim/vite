import React, { Component, PropTypes } from 'react';
/** Components */
import { Input, ProgressBar, Alert } from 'react-bootstrap';
import zxcvbn from 'zxcvbn';

const Labels = ['Weak', 'Normal', 'Medium', 'Strong', 'Very Strong'];
const ClassNames = ['danger', 'warning', 'primary', 'success', 'success'];
const InputFeedBacks = ['error', 'success', 'success', 'success', 'success'];

class PasswordInput extends Component {
  constructor(props, context) {
    super(props, context);
    this.state = this.getInitState();
  }
  getInitState() {
    return {
      score: null,
      warning: null,
      suggestions: []
    };
  }

  scoreToLabel() {
    if (Number.isInteger(this.state.score)) {
      return Labels[this.state.score];
    }
    else {
      return '';
    }
  }
  scoreToClass() {
    if (Number.isInteger(this.state.score)) {
      return ClassNames[this.state.score];
    }
    else {
      return 'default';
    }
  }
  scoreToPercentage() {
    if (Number.isInteger(this.state.score)) {
      return (this.state.score + 1) * 20;
    }
    else {
      return 0;
    }
  }

  scoreToInputFeedBack() {
    if (Number.isInteger(this.state.score)) {
      return InputFeedBacks[this.state.score]
    }
    else {
      return null;
    }
  }

  checkPassword(e) {
    const password = e.target.value;
    if(this.props.valueLink) {
      this.props.valueLink.requestChange(password);
    }
    if (password === '') {
      this.setState(this.getInitState());
      return;
    }
    const result = zxcvbn(password);
    const newState = {
      score: result.score,
      label: this.scoreToLabel(result.score),
      warning: result.feedback.warning,
      suggestions: result.feedback.suggestions
    };
    this.setState(newState);
  }
  getValue() {
    return this.refs.password.getValue();
  }
  isAcceptable() {
    return Number.isInteger(this.state.score) && this.state.score >= 1
  }
  renderWarning() {
    if (this.state.warning) {
      return (<Alert bsStyle={ 'warning'}>
                <i className="fa fa-exclamation-triangle"></i> {this.state.warning}
              </Alert>
      );
    }
  }
  renderSuggestions() {
    if (this.state.suggestions && this.state.suggestions.length > 0) {
      const suggestions = this.state.suggestions.map((suggestion, count) => {
        return (<p key={count}>
                  <i className="fa fa-info-circle"></i> {suggestion}
                </p>);
      });
      return (<Alert bsStyle={'info'}>
                {suggestions}
              </Alert>);
    }
  }
  render() {
    const inputFeedBack = this.scoreToInputFeedBack();
    var { valueLink, className, ref, type, ...other } = this.props;
    return (
      <div className="password-input">
        <Input type="password"
               ref="password"
               className="form-control"
               onChange={this.checkPassword.bind(this)}
               required
               bsStyle={inputFeedBack}
               hasFeedback = {!!inputFeedBack}
               {...other}
               />
        <ProgressBar striped={this.state.score === 4 }
                     bsSize={'xs'}
                     bsStyle={this.scoreToClass()}
                     now={this.scoreToPercentage()}
                     label={this.scoreToLabel()} /> {this.renderWarning()} {this.renderSuggestions()}
      </div>
      );
  }
}

export default PasswordInput;
